# üìÅ src/core/middleware/maintenance_guard.py
# üïí Last updated: 2025-07-08 23:55
# =============================================================================
# Khi system_maintenance = TRUE ‚Üí tr·∫£ 503 + no-store, ch·ªâ ƒë·ªÉ JS polling ƒëi·ªÅu khi·ªÉn reload
# ----------------------------------------------------------------------------- 
# ‚ú® PATCH 2025-07-08 23:55
#   ‚Ä¢ C·∫≠p nh·∫≠t timestamp v√† x√°c nh·∫≠n template path ‚Äúmaintenance/503_maintenance.html‚Äù
# =============================================================================

from __future__ import annotations

from litestar import Request
from litestar.middleware.base import AbstractMiddleware
from litestar.response import Template
from litestar.types import ASGIApp, Receive, Scope, Send

from core.db.engine import SessionLocal
from core.db.models import SystemSettings

class MaintenanceGuardMiddleware(AbstractMiddleware):
    """Ch·∫∑n HTTP request khi b·∫≠t ch·∫ø ƒë·ªô b·∫£o tr√¨ (tr·ª´ asset & /ping)."""

    _WHITELIST: tuple[str, ...] = (
        "/static", "/images", "/js", "/css", "/favicon", "/ping"
    )

    def __init__(self, app: ASGIApp) -> None:
        super().__init__(app)

    async def __call__(self, scope: Scope, receive: Receive, send: Send) -> None:
        # B·ªè qua non-HTTP
        if scope["type"] != "http":
            return await self.app(scope, receive, send)

        request = Request(scope=scope, receive=receive, send=send)
        path    = request.url.path

        # Whitelist asset & health check
        if any(path.startswith(p) for p in self._WHITELIST):
            return await self.app(scope, receive, send)

        # L·∫•y c·∫•u h√¨nh
        with SessionLocal() as db:
            settings = db.query(SystemSettings).first()

        # N·∫øu ƒëang b·∫£o tr√¨ ‚Üí tr·∫£ 503 + header no-store (kh√¥ng √©p HTTP reload)
        if settings and settings.system_maintenance:
            template = Template("maintenance/503_maintenance.html")
            response = template.to_asgi_response(app=self.app, request=request)
            response.status_code              = 503
            response.headers["Cache-Control"] = "no-store, max-age=0"
            return await response(scope, receive, send)

        # Kh√¥ng b·∫£o tr√¨ ‚Üí ti·∫øp t·ª•c b√¨nh th∆∞·ªùng
        return await self.app(scope, receive, send)
