# üìÅ shared/csrf.py
# üïí Last updated: 2025-07-05 15:45
# =============================================================================
# CSRF helper ‚Äì Double-Submit Cookie pattern
# -----------------------------------------------------------------------------
# ‚Ä¢ get_client_token(request)  ‚Üí tr√≠ch token client g·ª≠i (header ‚Ä∫ body ‚Ä∫ query)
# ‚Ä¢ validate_csrf(request)     ‚Üí so kh·ªõp cookie "csrftoken" v√† client-token.
# ‚Ä¢ CsrfError                  ‚Üí raise 403 khi kh√¥ng h·ª£p l·ªá.
# -----------------------------------------------------------------------------
# Ghi ch√∫:
#   ‚Äì D√πng cho middleware `core/middleware/csrf_guard.py`.
#   ‚Äì Kh√¥ng ph·ª• thu·ªôc ORM / DB; ch·ªâ thao t√°c Request.
# =============================================================================

from __future__ import annotations

from typing import Optional

from litestar import Request
from litestar.exceptions import HTTPException

from shared.secure_cookie import get_csrf_cookie

_HEADER_NAME   = "X-CSRFToken"
_FORM_FIELD    = "csrf_token"
_QUERY_PARAM   = "csrf_token"


class CsrfError(HTTPException):
    """Raise 403 Forbidden khi token CSRF kh√¥ng h·ª£p l·ªá."""

    def __init__(self, detail: str = "CSRF token missing or incorrect") -> None:
        super().__init__(status_code=403, detail=detail)


async def _get_body_field(request: Request) -> Optional[str]:
    """
    Tr√≠ch tr∆∞·ªùng csrf_token trong body n·∫øu Content-Type l√†:
        ‚Ä¢ application/x-www-form-urlencoded
        ‚Ä¢ multipart/form-data
        ‚Ä¢ application/json
    Tr·∫£ v·ªÅ None n·∫øu kh√¥ng t√¨m th·∫•y ho·∫∑c body r·ªóng.
    """
    ctype = (request.headers.get("content-type") or "").split(";", 1)[0].strip().lower()

    if ctype in ("application/x-www-form-urlencoded", "multipart/form-data"):
        form = await request.form()  # type: ignore[func-returns-value]
        return (form.get(_FORM_FIELD) or "").strip() or None

    if ctype == "application/json":
        try:
            data = await request.json()
            val = data.get(_FORM_FIELD)
            if isinstance(val, str) and val.strip():
                return val.strip()
        except Exception:  # malformed JSON ‚Üí ignore
            pass

    return None


async def get_client_token(request: Request) -> Optional[str]:
    """
    L·∫•y token do client g·ª≠i theo th·ª© t·ª± ∆∞u ti√™n:
        1. Header  X-CSRFToken
        2. Body    (field 'csrf_token')
        3. Query   ?csrf_token=...
    """
    hdr = (request.headers.get(_HEADER_NAME) or "").strip()
    if hdr:
        return hdr

    body_val = await _get_body_field(request)
    if body_val:
        return body_val

    q = request.query_params.get(_QUERY_PARAM, "").strip()
    return q or None


async def validate_csrf(request: Request) -> None:
    """
    So kh·ªõp cookie "csrftoken" v√† token client g·ª≠i.

    Raises
    ------
    CsrfError
        Khi thi·∫øu cookie ho·∫∑c thi·∫øu/b·∫•t kh·ªõp client-token.
    """
    cookie_token = get_csrf_cookie(request)
    if not cookie_token:
        raise CsrfError("Missing csrftoken cookie")

    client_token = await get_client_token(request)
    if not client_token or client_token != cookie_token:
        raise CsrfError("CSRF token missing or incorrect")
