# üìÅ shared/secure_cookie.py
# üïí Last updated: 2025-07-05 15:25
# =============================================================================
# 1Ô∏è‚É£  Session cookie  (HttpOnly, AES-GCM + HMAC, SameSite=Lax/Strict)
# 2Ô∏è‚É£  CSRF cookie     (plaintext random, *KH√îNG* HttpOnly ƒë·ªÉ JS ƒë·ªçc ƒë∆∞·ª£c)
# -----------------------------------------------------------------------------
# ‚Ä¢ Session:  ‚Äúdouble submit cookie‚Äù pattern y√™u c·∫ßu Keep cookie qu√©t token
#   trong JS, n√™n CSRF cookie ph·∫£i *kh√¥ng* HttpOnly. Token k√Ω hay kh√¥ng k√Ω
#   tu·ª≥ b·∫°n; ·ªü ƒë√¢y ƒë·ªÉ ƒë∆°n gi·∫£n ch·ªâ d√πng secrets.token_urlsafe().
# ‚Ä¢ C·∫£ hai cookie ƒë·ªÅu ƒë·∫∑t Secure + SameSite=Strict (khi ch·∫°y HTTPS) ƒë·ªÉ gi·∫£m
#   r·ªßi ro CSRF tr√™n GET. V·ªõi OAuth c·∫ßn m·ªü SameSite=Lax cho *session cookie*
#   ‚Äì tham s·ªë ƒë√£ c√≥ s·∫µn.
# =============================================================================

from __future__ import annotations
import base64
import hashlib
import secrets
from typing import Optional

from cryptography.fernet import Fernet, InvalidToken
from itsdangerous import BadSignature, BadTimeSignature, URLSafeTimedSerializer
from litestar import Request
from litestar.response import Response

from config import (
    SECRET_KEY,        # chu·ªói b√≠ m·∫≠t (32‚Äì64 bytes)
    COOKIE_NAME,       # t√™n session cookie, v√≠ d·ª• "session"
    COOKIE_SALT,       # salt cho signature, v√≠ d·ª• "cookie-signature"
    COOKIE_MAX_AGE,    # th·ªùi gian s·ªëng cookie (gi√¢y)
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1.  Session helpers  (ƒë√£ c√≥ t·ª´ tr∆∞·ªõc)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
_serializer: URLSafeTimedSerializer | None = None
_fernet: Fernet | None = None


def _get_serializer() -> URLSafeTimedSerializer:
    global _serializer
    if _serializer is None:
        _serializer = URLSafeTimedSerializer(
            SECRET_KEY,
            salt=COOKIE_SALT,
            serializer=None,
        )
    return _serializer


def _get_fernet() -> Fernet:
    global _fernet
    if _fernet is None:
        key_bytes = hashlib.sha256(f"{SECRET_KEY}::fernet".encode()).digest()
        _fernet = Fernet(base64.urlsafe_b64encode(key_bytes))
    return _fernet


def set_secure_cookie(
    resp: Response,
    uid: str,
    *,
    max_age: int | None = None,
    secure: bool = True,
    samesite: str = "Lax",   # ‚ö†Ô∏è ‚ÄúLax‚Äù h·ªó tr·ª£ OAuth redirect
) -> None:
    """ƒê·∫∑t **session cookie** an to√†n (HttpOnly)."""
    f = _get_fernet()
    s = _get_serializer()

    encrypted = f.encrypt(uid.encode()).decode()
    signed = s.dumps(encrypted)

    resp.set_cookie(
        COOKIE_NAME,
        signed,
        max_age=max_age or COOKIE_MAX_AGE,
        httponly=True,
        secure=secure,
        samesite=samesite,
        path="/",
    )


def get_secure_cookie(req: Request, *, silent: bool = True) -> Optional[str]:
    """Gi·∫£i m√£ & x√°c th·ª±c session cookie ‚Üí tr·∫£ v·ªÅ UID ho·∫∑c None."""
    signed = req.cookies.get(COOKIE_NAME)
    if not signed:
        return None

    s = _get_serializer()
    f = _get_fernet()
    try:
        encrypted = s.loads(signed, max_age=COOKIE_MAX_AGE)
        return f.decrypt(encrypted.encode()).decode()
    except (BadSignature, BadTimeSignature, InvalidToken):
        if silent:
            return None
        raise


def delete_secure_cookie(resp: Response) -> None:
    """Xo√° session cookie."""
    resp.delete_cookie(COOKIE_NAME, path="/")


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 2.  CSRF helpers  (m·ªõi ‚ú®)
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
CSRF_COOKIE_NAME = "csrftoken"
CSRF_MAX_AGE     = 60 * 60 * 8          # 8 gi·ªù ‚Äì tu·ª≥ ch·ªânh n·∫øu c·∫ßn


def generate_csrf_token() -> str:
    """Sinh token ng·∫´u nhi√™n URL-safe (32 bytes ‚âà 43 chars)."""
    return secrets.token_urlsafe(32)


def set_csrf_cookie(
    resp: Response,
    token: str,
    *,
    max_age: int | None = None,
    secure: bool = True,
) -> None:
    """
    ƒê·∫∑t cookie CSRF:
    ‚Ä¢ KH√îNG HttpOnly ‚Üí JS ƒë·ªçc & g·ª≠i header X-CSRFToken.
    ‚Ä¢ SameSite=Strict ƒë·ªÉ browser kh√¥ng g·ª≠i khi request xu·∫•t ph√°t t·ª´ trang kh√°c.
    """
    resp.set_cookie(
        CSRF_COOKIE_NAME,
        token,
        max_age=max_age or CSRF_MAX_AGE,
        httponly=False,       # JS c·∫ßn ƒë·ªçc cookie
        secure=secure,
        samesite="Strict",
        path="/",
    )


def get_csrf_cookie(req: Request) -> Optional[str]:
    """L·∫•y token CSRF (n·∫øu c√≥)."""
    return req.cookies.get(CSRF_COOKIE_NAME)
